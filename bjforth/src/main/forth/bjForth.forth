###################################################################################################
# \n ( -- s )
#
# New line constant.
###################################################################################################

: \n
 ."
 ".
;

###################################################################################################
# CR ( -- )
# Prints a new line.
###################################################################################################

: CR
  \n PRINT
;

###################################################################################################
# BL ( -- s )
#
# Whitespace constant.
###################################################################################################

: BL
  ."   ".
;

###################################################################################################
# SPACE ( -- )
#
# Prints a whitespace
###################################################################################################

: SPACE
  BL PRINT
;

###################################################################################################
# NEGATE ( a -- b )
#
# Negates the top of stack.
###################################################################################################

: NEGATE
  0 SWAP -
;

###################################################################################################
# TRUE ( -- 1 )
#
# Truthy constant.
###################################################################################################

: TRUE  1 ;

###################################################################################################
# FALSE ( -- 0 )
#
# Truthy constant.
###################################################################################################

: FALSE 0 ;

###################################################################################################
# NOT ( b -- a )
#
# Logically negates the truthy value at the top of stack.
###################################################################################################

: NOT   0= ;

###################################################################################################
# [COMPILE] ( -- )
#
# Compiles a word in compiling word as if it were in immediate mode.
###################################################################################################

: [COMPILE] IMMEDIATE
  WORD
  FIND
  >CFA
  ,
;

###################################################################################################
# IF
#
# Basic conditional: `IF ... ELSE ... THEN`
#
# ```forth
# : IS-10?
#   10 = IF
#     ." It's 10! ". PRINTLN
#    ELSE
#      ." Nope ". PRINTLN
#    THEN
# ;
# 10 IS-10?
# It's 10!
# 20 IS-10?
# Nope
# ```
###################################################################################################

: IF IMMEDIATE
  ' 0BRANCH ,
  HERE
  0 ,
;

###################################################################################################
# THEN
###################################################################################################

: THEN IMMEDIATE
  DUP
  HERE -
  SWAP !
;

###################################################################################################
# ELSE
###################################################################################################

: ELSE IMMEDIATE
  ' BRANCH ,
  HERE
  0 ,
  SWAP
  DUP
  HERE -
  SWAP !
;

###################################################################################################
# UNLESS
#
# Basic conditional.
#
# ```forth
# : IS-10?
#   10 = UNLESS
#     ." Nope ". PRINTLN
#   ELSE
#     ." It's 10 ". PRINTLN
#   THEN
# ;
# 10 IS-10?
# It's 10
# 20 IS-10?
# Nope
# ```
###################################################################################################

: UNLESS IMMEDIATE
  ' NOT ,
  [COMPILE] IF
;

###################################################################################################
# BEGIN
###################################################################################################

: BEGIN IMMEDIATE
  HERE
;

###################################################################################################
# UNTIL
#
# Basic looping construct.
#
# ```forth
# : COUNT-TO-9
#  1
#  BEGIN
#  PRINT SPACE
#  1+
#  DUP 10 = UNTIL
# ;
# COUNT-TO-9
# 1 2 3 4 5 6 7 8 9
# ```
###################################################################################################

: UNTIL IMMEDIATE
  ' 0BRANCH ,
  HERE SWAP -
  ,
;

###################################################################################################
# AGAIN
#
# An infinite loop that can be only returned from via `EXIT`.
#
# ```forth
# : COUNT-TO-9
#   1
#   BEGIN
#   PRINT SPACE
#   1+
#   DUP 10 = IF
#     EXIT
#   THEN
#   AGAIN
# ;
# COUNT-TO-9
# 1 2 3 4 5 6 7 8 9
# ```forth
###################################################################################################

: AGAIN IMMEDIATE
  ' BRANCH ,
  HERE SWAP -
  ,
;

###################################################################################################
# WHILE
#
# Basic looping construct.
#
# BEGIN condition WHILE loop-part REPEAT
#
# ```forth
# : COUNT-TO-9
# 1
# BEGIN
#   DUP 10 <>
# WHILE
#   PRINT SPACE
#   1+
# REPEAT
# ;
# COUNT-TO-9
# 1 2 3 4 5 6 7 8 9
# ```
###################################################################################################

: WHILE IMMEDIATE
  ' 0BRANCH ,
  HERE
  0 ,
;

###################################################################################################
# REPEAT
###################################################################################################

: REPEAT IMMEDIATE
  ' BRANCH ,
  SWAP
  HERE SWAP - ,
  DUP
  HERE -
  SWAP !
;

###################################################################################################
# NIP ( x y -- y )
#
# Drops the 2nd element of the stack.
#
# ```forth
# 10 20 NIP .S
# java.lang.Integer<20>
# ```
###################################################################################################

: NIP
  SWAP DROP
;

###################################################################################################
# TUCK ( x y -- y x y )
#
# Makes a copy of the top of the stack as the 3rd top of stack.
#
# ```forth
# 10 20 TUCK .S
# java.lang.Integer<20>
# java.lang.Integer<10>
# java.lang.Integer<20>
# ```
###################################################################################################

: TUCK
  SWAP OVER
;

###################################################################################################
# PICK ( x_u ... x_1 x_0 u -- x_u ... x_1 x_0 x_u )
#
# Copies the `u`th element of the stack to the top.
#
# ```forth
# 10 20 30 40 1 PICK
# .S
# java.lang.Integer<10>
# java.lang.Integer<20>
# java.lang.Integer<30>
# java.lang.Integer<40>
# java.lang.Integer<20>
# ```
###################################################################################################

: PICK
  1-
  DSP@@
;

###################################################################################################
# (
#
# Immediate word that treats `(` and `)` as comment indicators.
###################################################################################################

: ( IMMEDIATE
  1
  BEGIN
    KEY
    DUP ." ( ". = IF
      DROP
      1+
    ELSE
      ." ) ". = IF
        1-
      THEN
    THEN
  DUP 0= UNTIL
  DROP
;

###################################################################################################
# /MOD ( x y - quotient remainder )
#
# Leaves the quotient and remainder of `y / x` on the stack.
###################################################################################################

: /MOD ( x y - quotient remainder )
  2DUP
  SWAP
  /
  ROT ROT
  SWAP
  MOD
;

###################################################################################################
# SPACES ( n -- )
#
# Prints `n` whitespaces.
###################################################################################################

: SPACES ( n -- )
  BEGIN
    DUP 0>
  WHILE
    SPACE
    1-
  REPEAT
  DROP
;

###################################################################################################
# DECIMAL ( -- )
#
# Sets the value of `BASE` to 10.
###################################################################################################

: DECIMAL ( -- )
  10 !BASE
;

###################################################################################################
# HEX ( -- )
#
# Sets the value of `BASE` to 16.
###################################################################################################

: HEX ( -- )
  16 !BASE
;

###################################################################################################
# STR-PADDED-FORMAT ( padding -- format-string )
#
# Produces a format string which left pads a string to `padding`.
#
# ```forth
# 10 STR-PADDED-FORMAT PRINT
# %10s
# ```
###################################################################################################

: STR-PADDED-FORMAT ( padding -- format-string )
  .< toString()/0 >.
  ." s ".
  SWAP
  ." % ".
  ." ".
  ,< String/join(CharSequence, CharSequence...)/4 >,
;

###################################################################################################
# STR-REPLACE ( replacement target s -- s )
#
# Replaces all occurrences of `target` in `s` with `replacement`.
#
# ```forth
# ." BOO ". ." ll ". ." Hello ". STR-REPLACE PRINT
# HeBOOo
###################################################################################################


: STR-REPLACE ( replacement target s -- s )
  .< replaceAll(String, String)/2 >.
;

###################################################################################################
# NUM->STR ( x width -- )
#
# Prints a given number to string representation in the same base as `BASE`.
# The result is padded with zeros to the width specified.
#
# ```forth
# 224 4 HEX NUM->STR
# 00e0
# ```
###################################################################################################

: NUM->STR ( number -- string )
  BASE SWAP
  ,< Integer/toString(Integer, Integer)/2 >,
;

: NUM->STR ( x width -- )
  DUP
  0<> IF
    SWAP
    NUM->STR
    SWAP
    STR-PADDED-FORMAT
    .< formatted(Object...)/1 >.
    ." 0 ".
    BL
    ROT
    STR-REPLACE
  ELSE
    DROP
    NUM->STR
  THEN
  PRINT SPACE
;

###################################################################################################
# . ( x -- )
#
# Prints a given number to string representation in the same base as `BASE`.
#
# ```forth
# DECIMAL 220 HEX .
# dc
# ```
###################################################################################################

: . ( x -- )
  0
  NUM->STR
;

###################################################################################################
# FILE-OPEN ( s -- BufferedReader )
#
# ```forth
# ." /home/bahman/.bashrc ". FILE-OPEN
# .S
# java.io.BufferedReader<java.io.BufferedReader@2ac1fdc4>
# ```
###################################################################################################

: FILE-OPEN ( s -- BufferedReader )
  @< FileReader(String)/1 >@
  @< BufferedReader(Reader)/1 >@
;

###################################################################################################
# FILE-READ-LINE ( BufferedReader -- s )
#
# Reads a single line from a file.
#
# ```forth
# FILE-READ-LINE
# .S
# java.lang.String<# -*- mode: sh-mode; sh-basic-offset: 2; -*->
# ```
###################################################################################################

: FILE-READ-LINE ( BufferedReader -- s )
  .< readLine()/0 >.
;

###################################################################################################
# FILE-PRINT ( BufferedReader -- )
#
# Prints the contents of a file to stdout.
###################################################################################################

: FILE-PRINT ( BufferedReader -- )
  BEGIN
    DUP
    .< readLine()/0 >.
    DUP
    ?NULL IF
      DROP
      EXIT
    ELSE
      PRINTLN
      DROP
    THEN
  AGAIN
;

###################################################################################################
# FILE-CLOSE ( BufferedReader -- )
#
# Closes the file handle.
###################################################################################################

: FILE-CLOSE ( BufferedReader -- )
  .< close()/0 >.
  DROP
;

###################################################################################################
# MAX ( x y -- max )
#
# Pushes the larger number onto stack.
#
# ```forth
# 10 20 MAX .
# 20
# ```
###################################################################################################

: MAX ( x y -- max )
  2DUP
  > IF
    NIP
  ELSE
    SWAP
    NIP
  THEN
;

###################################################################################################
# MIN ( x y -- mIN )
#
# Pushes the larger number onto stack.
#
# ```forth
# 10 20 MIN .
# 10
# ```
###################################################################################################

: MIN ( x y -- min )
  2DUP
  < IF
    NIP
  ELSE
    SWAP
    NIP
  THEN
;

###################################################################################################
# SQRT ( x -- square-root )
# 
# ```forth
# 10 SQRT .S
# java.lang.Double: 3.1622776601683795
# ```
###################################################################################################

: SQRT
  ,< Math/sqrt(Double)/1 >,
;

###################################################################################################
# WITHIN ( c a b -- boolean )
#
# c a b WITHIN returns true if  and b > c and a <= c
#
# ```forth
# 20 30 10 WITHIN .
# 1
# ```
###################################################################################################

: WITHIN
  -ROT
  OVER
  <= IF
    > IF
      TRUE
    ELSE
      FALSE
    THEN
  ELSE
    2DROP
    FALSE
  THEN
;

###################################################################################################
# x CONSTANT name ( x -- )
#
# Creates a constant named `name` with the value at the top of stack.
#
# ```forth
# 10 CONSTANT FOO
# FOO .
# 10
# ```
###################################################################################################

: CONSTANT ( x -- )
  WORD
  CREATE
  ." DOCOL ". ,
  ' LIT ,
  ,
  ' EXIT ,
;

###################################################################################################
# ALLOT ( n -- addr )
#
# Allocates `n` memory cells (increments `HERE` by `n`).
###################################################################################################
 
: ALLOT ( n -- addr )
  HERE + !HERE
;

###################################################################################################
# dummy-value VARIABLE name ( x -- )
# 
# Creates a variable accessible via `!` and `@` words.
# ```forth
# -1 VARIABLE FOO
# 10 FOO !
# FOO @ .
# 10
# ```
###################################################################################################

: VARIABLE
  1 ALLOT
  WORD
  CREATE
  ." DOCOL ". ,
  ' LIT ,
  , 
  ' EXIT ,
;  

###################################################################################################
# CASE test1 OF ... ENDOF test2 OF ... ENDOF ENDCASE
#
# ```forth
# : 5-OR-10
#   CASE
#     5 OF
#       ." It's 5! ". PRINT
#     ENDOF
#     10 OF
#       ." It's 10! ". PRINT
#     ENDOF
#   ENDCASE
# ;
# ```
###################################################################################################

: CASE IMMEDIATE
  0
;

: OF IMMEDIATE
  ' OVER ,
  ' = ,
  [COMPILE] IF
  ' DROP ,
;

: ENDOF IMMEDIATE
  [COMPILE] ELSE
;

: ENDCASE IMMEDIATE
  ' DROP ,
  BEGIN
    ?DUP
  WHILE
    [COMPILE] THEN
  REPEAT
;

###################################################################################################
# :ANON ( -- xt )
#
# Creates an anonymous word and pushes its XT on stack (which can be run via `EXECUTE`.)
#
# ```forth
# :ANON ." Hello, world ". PRINTLN ;
# EXECUTE
# Hello, world
# ```
###################################################################################################

: :ANON 
  ." ". CREATE
  HERE 
  ." DOCOL ". ,
  ]
;

###################################################################################################
# ['] ( -- )
#
# Compiles the XT of the next word on the spot and places it in memory alongside `LIT`.
#
# ```forth
# : FOO 10 20 * ;
# : BAR ['] FOO ;
# SEE BAR
# BAR at 00000516 (immediate: false, hidden: false)
# 509
# ```
###################################################################################################

: ['] IMMEDIATE
  ' LIT ,
;
