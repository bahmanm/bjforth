###################################################################################################
: \n
 ." 
 ".
;

###################################################################################################
: CR \n EMIT ;

###################################################################################################
: BL ."   ". ;

###################################################################################################
: SPACE BL EMIT ;
 
###################################################################################################
### ( a - b )
: NEGATE 0 SWAP - ;

###################################################################################################
: TRUE  1 ;
: FALSE 0 ;
: NOT   0= ;

###################################################################################################
: [COMPILE] IMMEDIATE
  WORD
  FIND
  >CFA
  ,
;

###################################################################################################
: IF IMMEDIATE
  ' 0BRANCH ,  
  HERE        
  0 , 
;

###################################################################################################
: THEN IMMEDIATE
  DUP
  HERE -
  SWAP !
;

###################################################################################################
: ELSE IMMEDIATE
  ' BRANCH ,
  HERE
  0 ,
  SWAP
  DUP
  HERE -
  SWAP !
;

###################################################################################################
: UNLESS IMMEDIATE
  ' NOT ,
  [COMPILE] IF
;

###################################################################################################
: BEGIN IMMEDIATE
  HERE
;

###################################################################################################
: UNTIL IMMEDIATE
  ' 0BRANCH ,
  HERE SWAP -
  ,
;

###################################################################################################
: AGAIN IMMEDIATE
  ' BRANCH ,
  HERE SWAP -
  ,
;

###################################################################################################
: WHILE IMMEDIATE
  ' 0BRANCH ,
  HERE
  0 ,
;

###################################################################################################
: REPEAT IMMEDIATE
  ' BRANCH ,
  SWAP
  HERE SWAP - ,
  DUP
  HERE SWAP -
  SWAP !
;

###################################################################################################
### ( x y -- y ) 
: NIP 
  SWAP DROP 
;

###################################################################################################
### ( x y -- y x y )
: TUCK  
  SWAP OVER 
;

###################################################################################################
### ( x_u ... x_1 x_0 u -- x_u ... x_1 x_0 x_u )
: PICK 
  1+
  DSP@@
;
###################################################################################################

: ( IMMEDIATE
  1	
  BEGIN
    KEY
    DUP ." ( ". = IF
      DROP
      1+
    ELSE
      ." ) ". = IF
        1-
      THEN
    THEN
  DUP 0= UNTIL
  DROP
;

###################################################################################################

: /MOD ( x y - quotient remainder )
  2DUP
  SWAP
  /
  ROT ROT
  SWAP
  MOD 
;

###################################################################################################

: SPACES ( n -- )
  BEGIN
    DUP 0>
  WHILE
    SPACE
    1-
  REPEAT
  DROP
;

###################################################################################################

: DECIMAL ( -- ) 
  10 !BASE 
;

: HEX ( -- ) 
  16 !BASE 
;

###################################################################################################
# STR-PADDED-FORMAT ( padding -- format-string )
#
# Produces a format string which left pads a string to `padding`.
#
# ```forth
# 10 STR-PADDED-FORMAT PRINT
# %10s
# ```
###################################################################################################

: STR-PADDED-FORMAT ( padding -- format-string )
  .< toString()/0 >.    
  ." s ". 
  SWAP
  ." % ". 
  ." ". 
  ,< String/join(CharSequence, CharSequence...)/4 >,          
;

###################################################################################################
# STR-REPLACE ( replacement target s -- s )
#
# Replaces all occurrences of `target` in `s` with `replacement`.
#
# ```forth
# ." BOO ". ." ll ". ." Hello ". STR-REPLACE PRINT
# HeBOOo
###################################################################################################


: STR-REPLACE ( replacement target s -- s )
  .< replaceAll(String, String)/2 >.
;

###################################################################################################
# NUM->STR ( x width -- )
# 
# Prints a given number to string representation in the same base as `BASE`.
# The result is padded with zeros to the width specified.
# 
# ```forth
# 224 4 HEX NUM->STR
# 00e0 
# ```
###################################################################################################

: NUM->STR ( number -- string )
  BASE SWAP
  ,< Integer/toString(Integer, Integer)/2 >,
;

: NUM->STR ( x width -- )
  DUP
  0<> IF
    SWAP 
    NUM->STR
    SWAP
    STR-PADDED-FORMAT
    .< formatted(Object...)/1 >.    
    ." 0 ".
    BL
    ROT
    STR-REPLACE
  ELSE
    DROP
    NUM->STR
  THEN   
  PRINT SPACE
;

###################################################################################################
# . ( x -- )
#
# Prints a given number to string representation in the same base as `BASE`.
#
# ```forth
# DECIMAL 220 HEX .
# dc 
# ```
###################################################################################################

: . ( x -- )
  0 
  NUM->STR 
;
